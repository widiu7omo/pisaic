#import menu/*.graphql
#import submenu/*.graphql
"A datetime string with format 'Y-m-d H:i:s', e.g. '2018-01-01 13:00:00'."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format 'Y-m-d', e.g. '2011-05-23'."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")
type Query {
    users: [User] @all
    user(id: ID @eq): User @find

    units: [Unit] @all
    unit(id: ID @eq): Unit @find

}

type Mutation {
    #User
    createUser(
        name: String @rules(apply: ["required","min:4"])
        email: String @rules(apply: ["required", "email", "unique:users,email"])
        password:String! @rules(apply: ["min:4"]) @bcrypt
        username:String! @rules(apply:["required","min:4"])
    ): User @create
    updateUser(
        id: ID @rules(apply: ["required"])
        name: String
        email: String @rules(apply: ["email"])
        username: String @rules(apply:["min:4"])
    ): User @update
    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User @delete

    #Unit
    createUnit(
        name:String @rules(apply:["required"])

    ): Unit @create
    updateUnit(
        id:ID @rules(apply:["required"])
        name:String
    ):Unit @update
    deleteUnit(
        id:ID! @rules(apply:["required"])
    ):Unit @delete

}

type User {
    id: ID!
    name: String!
    username:String
    password:String
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    units:[Unit!]! @belongsToMany
}

type Unit {
    id: ID!
    name: String!
    users: [User!]! @belongsToMany
    inspectcameras: [InspectCamera] @hasMany
    pisheets: [Pisheet] @hasMany
}

type Masterlog {
    id:ID!
    name: String
}

type Pisheet {
    id: ID!
    unit_id: Int!
    masterlog_id: Int!
    unit:Unit @belongsTo
    masterlog: Masterlog @belongsTo
    workorders:[Workorder] @hasMany
    dataunits:[Dataunit] @hasMany
    unit: Unit @belongsTo
}
